#!/usr/bin/env bash

# ==============================================================================
# = functions                                                                  =
# ==============================================================================

# Always list directory contents upon 'cd'
cd() {
  builtin cd "$@"; ls -lh; 
}               

# What do?
function help() {
      curl cht.sh/$1
}

# Always display error code unless it's 0
prompt_show_ec () {
 # Catch exit code
 ec=$?
 # Display exit code in red text unless zero
 if [ $ec -ne 0 ];then
  echo -e "\033[31;1m[$ec]\033[0m"
 fi
}
PROMPT_COMMAND="prompt_show_ec; $PROMPT_COMMAND"

# Create and enter a directory
function mkcd { 
 mkdir "$1"; 
 cd "$1"; 
}

# With this function you can explore the filsystem,
# and display contents of both directories and files
# without going to the beginning of the line to
# switch between ls and less.
function l() {
    if [ -z "$2" -a -f "$1" ];then
        less "$1"
    else
        ls -l --color=auto "$@"
    fi
}

# Optional number of levels to cd ../
function up() {
  local d=""
  limit=$1
  for ((i=1 ; i <= limit ; i++))
    do
      d=$d/..
    done
  d=$(echo $d | sed 's/^\///')
  if [ -z "$d" ]; then
    d=..
  fi
  cd $d
}

# ARCHIVE EXTRACTION
# usage: ex <file>
ex () {
  if [ -f $1 ] ; then
    case $1 in
      *.tar.bz2)    tar xjf $1    ;;
      *.tar.gz)     tar xzf $1    ;;
      *.tar.xz)     tar xf $1     ;;
      *.tar)        tar xf $1     ;;
      *.tar.zst)    uzstd $1      ;;
      *.bz2)        bunzip2 $1    ;;
      *.rar)        unrar x $1    ;;
      *.gz)         gunzip $1     ;;
      *.tbz2)       tar xjf $1    ;;
      *.tgz)        tar xzf $1    ;;
      *.zip)        unzip $1      ;;
      *.Z)          uncompress $1 ;;
      *.7z)         7z x $1       ;;
      *.deb)        ar x $1       ;;
      *)    echo "'$1' cannot be extracted via ex()" ;;
    esac
  else
    echo "'$1' is not a valid file"
  fi
}

